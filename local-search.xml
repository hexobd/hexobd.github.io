<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>模拟火车客运货运系统</title>
    <link href="/2024/06/27/%E6%A8%A1%E6%8B%9F%E7%81%AB%E8%BD%A6%E5%AE%A2%E8%BF%90%E8%B4%A7%E8%BF%90%E7%B3%BB%E7%BB%9F/"/>
    <url>/2024/06/27/%E6%A8%A1%E6%8B%9F%E7%81%AB%E8%BD%A6%E5%AE%A2%E8%BF%90%E8%B4%A7%E8%BF%90%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="模拟火车客运货运系统"><a href="#模拟火车客运货运系统" class="headerlink" title="模拟火车客运货运系统"></a>模拟火车客运货运系统</h1><h6 id="提出过程："><a href="#提出过程：" class="headerlink" title="提出过程："></a>提出过程：</h6><p>​临近期末放假回家，外地的学生都避免不了一个购票抢票的话题，再加上这一个学期的所学知识，于是便想出了要去做出一个客运货运的查票系统，便于我们了解车票，然后进行设计购票。</p><h5 id="项目的概述和功能分析"><a href="#项目的概述和功能分析" class="headerlink" title="项目的概述和功能分析"></a>项目的概述和功能分析</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">这个项目里面通过使用了Tkinter 模块设计出一个登录的GUI界面，但是后面的每一项具体的选择后的结果仍是在编译器里面进行。在这个项目中，同时还运用了Geo画出了中国地图并赋予特定城市的AQI指数，然后还通过matploitlib实现了不同城市的天气预报的最高最低气温的柱状图。同时还赋予了一个货运功能，这样便于通过里程数大致估算出寄件所需要的钱数，注意的是两城市间的距离是根据经纬度坐标算出的直线距离，这里会存在误差。<br></code></pre></td></tr></table></figure><h5 id="数据存储："><a href="#数据存储：" class="headerlink" title="数据存储："></a>数据存储：</h5><p>​这个项目直接简单的把txt文件当成一个数据库，把生成的数据用json格式写入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> datetime<br><br>start = [<span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-string">&quot;广州&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>, <span class="hljs-string">&quot;成都&quot;</span>, <span class="hljs-string">&quot;武汉&quot;</span>, <span class="hljs-string">&quot;西安&quot;</span>, <span class="hljs-string">&quot;郑州&quot;</span>, <span class="hljs-string">&quot;厦门&quot;</span>, <span class="hljs-string">&quot;南京&quot;</span>, <span class="hljs-string">&quot;济南&quot;</span>]<br>destination = [<span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-string">&quot;广州&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>, <span class="hljs-string">&quot;成都&quot;</span>, <span class="hljs-string">&quot;武汉&quot;</span>, <span class="hljs-string">&quot;西安&quot;</span>, <span class="hljs-string">&quot;郑州&quot;</span>, <span class="hljs-string">&quot;厦门&quot;</span>, <span class="hljs-string">&quot;南京&quot;</span>, <span class="hljs-string">&quot;济南&quot;</span>]<br>train_prefixes = [<span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>, <span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;T&quot;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_info</span>():<br>    start_place = random.choice(start)<br>    destination_place = random.choice(destination)<br>    start_date = datetime.datetime.now().replace(year=<span class="hljs-number">2024</span>, month=random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">12</span>), day=random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">28</span>),<br>                                                 hour=random.randint(<span class="hljs-number">7</span>, <span class="hljs-number">23</span>), minute=random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">59</span>), second=<span class="hljs-number">0</span>,<br>                                                 microsecond=<span class="hljs-number">0</span>)<br>    final_state = start_date + datetime.timedelta(hours=random.randint(<span class="hljs-number">2</span>, <span class="hljs-number">24</span>), minutes=random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">59</span>))<br>    train_turn = random.choice(train_prefixes) + <span class="hljs-built_in">str</span>(random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">9999</span>))<br>    price = random.randint(<span class="hljs-number">100</span>, <span class="hljs-number">1200</span>)<br>    <span class="hljs-keyword">return</span> train_turn, price, start_place, destination_place, start_date, final_state<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reasonable_data</span>(<span class="hljs-params">train_turn, price, start_date, final_state</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;G&#x27;</span> <span class="hljs-keyword">in</span> train_turn:<br>        <span class="hljs-keyword">if</span> final_state - start_date &gt; datetime.timedelta(hours=<span class="hljs-number">12</span>, minutes=<span class="hljs-number">59</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> price &lt;= <span class="hljs-number">400</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;Z&#x27;</span> <span class="hljs-keyword">in</span> train_turn:<br>        <span class="hljs-keyword">if</span> price &gt; <span class="hljs-number">600</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;K&#x27;</span> <span class="hljs-keyword">in</span> train_turn:<br>        <span class="hljs-keyword">if</span> price &gt; <span class="hljs-number">500</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;C&#x27;</span> <span class="hljs-keyword">in</span> train_turn:<br>        <span class="hljs-keyword">if</span> price &gt; <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;T&#x27;</span> <span class="hljs-keyword">in</span> train_turn:<br>        <span class="hljs-keyword">if</span> price &gt; <span class="hljs-number">500</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:\\Users\\platycodon\\Desktop\\schedule.txt&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        train_turn, price, start_place, destination_place, start_date, final_state = generate_info()<br>        <span class="hljs-keyword">if</span> reasonable_data(train_turn, price, start_date, final_state) == <span class="hljs-literal">True</span>:<br>            res = (<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;train_turn&#125;</span> <span class="hljs-subst">&#123;price&#125;</span> <span class="hljs-subst">&#123;start_place&#125;</span>--&gt;<span class="hljs-subst">&#123;destination_place&#125;</span> <span class="hljs-subst">&#123;start_date&#125;</span> <span class="hljs-subst">&#123;final_state&#125;</span>\n&quot;</span>)<br>            fp.write(res)<br><br><span class="hljs-comment"># 用于获取空气质量的数据信息</span><br><span class="hljs-comment"># import akshare as ak</span><br><span class="hljs-comment"># import pandas as pd</span><br><span class="hljs-comment"># crypto_js_spot_df = ak.air_quality_rank()</span><br><span class="hljs-comment"># pd.set_option(&#x27;display.max_rows&#x27;, None) # 显示全部行</span><br><span class="hljs-comment"># pd.set_option(&#x27;display.max_columns&#x27;, None) # 显示全部列</span><br><span class="hljs-comment"># print(crypto_js_spot_df)</span><br></code></pre></td></tr></table></figure><p><img src="https://krseoul.imgtbl.com/i/2024/06/26/667bd062adc29.png" alt="1719390302657.png"></p><p>还有登陆密码的存储也是修改读入到其中：</p><p><img src="https://krseoul.imgtbl.com/i/2024/06/26/667bcf7ddef51.png" alt="1719390075105.png"></p><p>对于列车信息后来我们使用了爬虫进行获取，但是鉴于测试代码阶段，并没用获得的真实的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> Workbook<br><span class="hljs-keyword">from</span> prettytable <span class="hljs-keyword">import</span> PrettyTable<br><span class="hljs-keyword">from</span> save_city_list <span class="hljs-keyword">import</span> get_city_data<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GetTrains</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, date, begin_id, end_id</span>):<br>        <span class="hljs-comment"># 请求的目标链接</span><br>        self.url = <span class="hljs-string">&quot;https://kyfw.12306.cn/otn/leftTicket/query&quot;</span><br>        <span class="hljs-comment"># cookies</span><br>        self.cookies = &#123;<br>            <span class="hljs-string">&#x27;_uab_collina&#x27;</span>: <span class="hljs-string">&#x27;171324859263120074949415&#x27;</span>,<br>            <span class="hljs-string">&#x27;JSESSIONID&#x27;</span>: <span class="hljs-string">&#x27;708D9C6917F9858184F462E86DC45BD0&#x27;</span>,<br>            <span class="hljs-string">&#x27;_jc_save_fromStation&#x27;</span>: <span class="hljs-string">&#x27;%u82CF%u5DDE%2CSZH&#x27;</span>,<br>            <span class="hljs-string">&#x27;_jc_save_toStation&#x27;</span>: <span class="hljs-string">&#x27;%u6C5D%u5DDE%2CROF&#x27;</span>,<br>            <span class="hljs-string">&#x27;_jc_save_fromDate&#x27;</span>: <span class="hljs-string">&#x27;2024-04-30&#x27;</span>,<br>            <span class="hljs-string">&#x27;_jc_save_wfdc_flag&#x27;</span>: <span class="hljs-string">&#x27;dc&#x27;</span>,<br>            <span class="hljs-string">&#x27;route&#x27;</span>: <span class="hljs-string">&#x27;9036359bb8a8a461c164a04f8f50b252&#x27;</span>,<br>            <span class="hljs-string">&#x27;BIGipServerotn&#x27;</span>: <span class="hljs-string">&#x27;1172832522.24610.0000&#x27;</span>,<br>            <span class="hljs-string">&#x27;BIGipServerpassport&#x27;</span>: <span class="hljs-string">&#x27;854065418.50215.0000&#x27;</span>,<br>            <span class="hljs-string">&#x27;guidesStatus&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>            <span class="hljs-string">&#x27;highContrastMode&#x27;</span>: <span class="hljs-string">&#x27;defaltMode&#x27;</span>,<br>            <span class="hljs-string">&#x27;cursorStatus&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>            <span class="hljs-string">&#x27;_jc_save_toDate&#x27;</span>: <span class="hljs-string">&#x27;2024-04-30&#x27;</span>,<br>        &#125;<br>        <span class="hljs-comment"># 构建请求头</span><br>        self.headers = &#123;<br>            <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;*/*&#x27;</span>,<br>            <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,zh-TW;q=0.5&#x27;</span>,<br>            <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>            <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>            <span class="hljs-string">&#x27;If-Modified-Since&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>            <span class="hljs-string">&#x27;Pragma&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>            <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;https://www.12306.cn/index/index.html&#x27;</span>,<br>            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36 Edg/124.0.0.0&#x27;</span>,<br>            <span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>,<br>        &#125;<br>        <span class="hljs-comment"># 构建请求所需参数</span><br>        self.params = &#123;<br>            <span class="hljs-string">&quot;leftTicketDTO.train_date&quot;</span>: date,<br>            <span class="hljs-string">&quot;leftTicketDTO.from_station&quot;</span>: begin_id,<br>            <span class="hljs-string">&quot;leftTicketDTO.to_station&quot;</span>: end_id,<br>            <span class="hljs-string">&quot;purpose_codes&quot;</span>: <span class="hljs-string">&quot;ADULT&quot;</span><br>        &#125;<br>        <span class="hljs-comment"># 实例化美化表格对象</span><br>        self.pt = PrettyTable()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 对目标网址发送请求</span><br>        res = requests.get(<br>            self.url, headers=self.headers, params=self.params, cookies=self.cookies<br>        ).json()<br>        data_list = res[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;result&#x27;</span>]<br>        <span class="hljs-comment"># 构造表格的表头，用于展示和保存</span><br>        header_list = [<br>            [<span class="hljs-string">&#x27;车次&#x27;</span>, <span class="hljs-string">&#x27;出发时间&#x27;</span>, <span class="hljs-string">&#x27;到达时间&#x27;</span>, <span class="hljs-string">&#x27;历时&#x27;</span>, <span class="hljs-string">&#x27;商务座&#x27;</span>, <span class="hljs-string">&#x27;一等座&#x27;</span>, <span class="hljs-string">&#x27;二等座&#x27;</span>, <span class="hljs-string">&#x27;软卧&#x27;</span>, <span class="hljs-string">&#x27;硬卧&#x27;</span>, <span class="hljs-string">&#x27;硬座&#x27;</span>, <span class="hljs-string">&#x27;无座&#x27;</span>, <span class="hljs-string">&#x27;备注&#x27;</span>]<br>        ]<br>        <span class="hljs-comment"># 将表头信息添加进展示表格的表头</span><br>        self.pt.field_names = header_list[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> data_list:<br>            <span class="hljs-comment"># 格式化添加表数据</span><br>            trains_msg = self.format_data(data)<br>            <span class="hljs-comment"># 将数据添加进列表，用于保存</span><br>            header_list.append(trains_msg)<br>        <span class="hljs-comment"># 打印表格</span><br>        <span class="hljs-built_in">print</span>(self.pt)<br>        <span class="hljs-comment"># 返回车次信息列表</span><br>        <span class="hljs-keyword">return</span> header_list<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">format_data</span>(<span class="hljs-params">self, data</span>):<br>        <span class="hljs-comment"># 将返回的数据以&#x27;|&#x27;进行分隔</span><br>        all_data_list = data.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br>        <span class="hljs-comment"># 提取车次的信息</span><br>        trains_msg = [<br>            all_data_list[<span class="hljs-number">3</span>],<br>            all_data_list[<span class="hljs-number">8</span>],<br>            all_data_list[<span class="hljs-number">9</span>],<br>            all_data_list[<span class="hljs-number">10</span>],<br>            all_data_list[<span class="hljs-number">32</span>] <span class="hljs-keyword">if</span> all_data_list[<span class="hljs-number">32</span>] != <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;--&quot;</span>,<br>            all_data_list[<span class="hljs-number">31</span>] <span class="hljs-keyword">if</span> all_data_list[<span class="hljs-number">31</span>] != <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;--&quot;</span>,<br>            all_data_list[<span class="hljs-number">30</span>] <span class="hljs-keyword">if</span> all_data_list[<span class="hljs-number">30</span>] != <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;--&quot;</span>,<br>            all_data_list[<span class="hljs-number">23</span>] <span class="hljs-keyword">if</span> all_data_list[<span class="hljs-number">23</span>] != <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;--&quot;</span>,<br>            all_data_list[<span class="hljs-number">28</span>] <span class="hljs-keyword">if</span> all_data_list[<span class="hljs-number">28</span>] != <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;--&quot;</span>,<br>            all_data_list[<span class="hljs-number">29</span>] <span class="hljs-keyword">if</span> all_data_list[<span class="hljs-number">29</span>] != <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;--&quot;</span>,<br>            all_data_list[<span class="hljs-number">26</span>] <span class="hljs-keyword">if</span> all_data_list[<span class="hljs-number">26</span>] != <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;--&quot;</span>,<br>            all_data_list[<span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> all_data_list[<span class="hljs-number">1</span>] != <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;--&quot;</span><br>        ]<br>        <span class="hljs-comment"># 增添表内容</span><br>        self.pt.add_row(trains_msg)<br>        <span class="hljs-comment"># 将提取的信息返回，用于保存</span><br>        <span class="hljs-keyword">return</span> trains_msg<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">save_data</span>(<span class="hljs-params">self, trains_data_list, date, begin, end</span>):<br>        num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;如果展示不清晰，需要保存时请扣1：&quot;</span>)<br>        <span class="hljs-keyword">if</span> num == <span class="hljs-string">&quot;1&quot;</span>:<br>            wb = Workbook()<br>            sheet = wb.create_sheet(<span class="hljs-string">&quot;车次信息&quot;</span>, -<span class="hljs-number">1</span>)<br>            <span class="hljs-comment"># 遍历表格索引，写入数据</span><br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(trains_data_list)):<br>                <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(trains_data_list[x])):<br>                    sheet.cell(x + <span class="hljs-number">1</span>, y + <span class="hljs-number">1</span>).value = trains_data_list[x][y]<br>            wb.save(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;date&#125;</span>_<span class="hljs-subst">&#123;begin&#125;</span>_<span class="hljs-subst">&#123;end&#125;</span>.xlsx&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据保存完成！&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 更新城市对应的英文代码，需要时再启用</span><br>    <span class="hljs-comment"># get_city_data()</span><br>    date = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入出发日期(YYYY-MM-DD)：&quot;</span>)<br>    begin = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入出发地：&quot;</span>)<br>    end = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入目的地：&quot;</span>)<br>    <span class="hljs-comment"># 读取生成的json文件</span><br>    city_list = json.load(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;city_data.json&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>))<br>    <span class="hljs-comment"># 获取城市对应的英文代码</span><br>    begin_id = city_list[begin]<br>    end_id = city_list[end]<br>    gt = GetTrains(date, begin_id, end_id)<br>    trains_data_list = gt.run()<br>    <span class="hljs-comment"># 是否需要保存数据</span><br>    gt.save_data(trains_data_list, date, begin, end)<br>    <span class="hljs-built_in">print</span>(<br>        <span class="hljs-string">&quot;12306直达链接(复制到浏览器打开)：&quot;</span>,<br>        <span class="hljs-string">&quot;https://kyfw.12306.cn/otn/leftTicket/init?&quot;</span><br>        <span class="hljs-string">&quot;linktypeid=dc&amp;&quot;</span><br>        <span class="hljs-string">f&quot;fs=<span class="hljs-subst">&#123;begin&#125;</span>,<span class="hljs-subst">&#123;begin_id&#125;</span>&amp;&quot;</span><br>        <span class="hljs-string">f&quot;ts=<span class="hljs-subst">&#123;end&#125;</span>,<span class="hljs-subst">&#123;end_id&#125;</span>&amp;&quot;</span><br>        <span class="hljs-string">f&quot;date=<span class="hljs-subst">&#123;date&#125;</span>&amp;&quot;</span><br>        <span class="hljs-string">&quot;flag=N,N,Y&quot;</span><br>    )<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_city_data</span>():<br>    url = <span class="hljs-string">&quot;https://kyfw.12306.cn/otn/resources/js/framework/station_name.js?station_version=1.9053&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在获取数据。&quot;</span>)<br>    <span class="hljs-comment"># 发送请求，获取返回的数据</span><br>    res = requests.get(url)<br>    data = <span class="hljs-built_in">str</span>(res.content, encoding=<span class="hljs-string">&quot;utf8&quot;</span>)<br>    <span class="hljs-comment"># 格式化返回的数据</span><br>    response_format(data)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">response_format</span>(<span class="hljs-params">data</span>):<br>    dict_data = <span class="hljs-built_in">dict</span>()<br>    <span class="hljs-comment"># 根据&#x27;|&#x27;分隔数据</span><br>    list_data = data.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br>    <span class="hljs-comment"># 从下标&#x27;1&#x27;开始, 每间隔5个为字典key</span><br>    result_x = list_data[<span class="hljs-number">1</span>:<span class="hljs-built_in">len</span>(list_data):<span class="hljs-number">5</span>]<br>    <span class="hljs-comment"># 从下标&#x27;2&#x27;开始, 每间隔5个为字典value</span><br>    result_y = list_data[<span class="hljs-number">2</span>:<span class="hljs-built_in">len</span>(list_data):<span class="hljs-number">5</span>]<br>    <span class="hljs-comment"># 循环将数据写入字典</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(result_x)):<br>        dict_data[result_x[i].replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>)] = result_y[i]<br>    <span class="hljs-comment"># 保存数据</span><br>    save_data(dict_data)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_data</span>(<span class="hljs-params">dict_data</span>):<br>    json_data = json.dumps(dict_data, indent=<span class="hljs-number">1</span>, ensure_ascii=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;city_data.json&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> w:<br>        w.write(json_data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据保存完成！&quot;</span>)<br><br><br>get_city_data()<br><br></code></pre></td></tr></table></figure><p><img src="https://krseoul.imgtbl.com/i/2024/06/26/667bd4e58f5ac.png" alt="1719391458122.png"></p><p><img src="https://krseoul.imgtbl.com/i/2024/06/26/667bd5570e0ca.png" alt="1719391570913.png"></p><h5 id="设计过程："><a href="#设计过程：" class="headerlink" title="设计过程："></a>设计过程：</h5><p>​首先我们先写出一个关于登录注册的类，给出我们平常登录时所需要的注册登录过程，对于该类的每个方法需要加上@classmethod，否则两个不同的类之间调用的时候，会因为形参冲突出现报错。然后就考虑需要把数据进行存储，这里用的时json的数据格式，考虑到密码的保密性，对密码进行了一个简单的sha256加密。随后就在写一个类生成Tkinter的GUI界面，把其呈现出来。考虑到现实性，就是如果从未登录的话，要首先进行注册，然后在进行登录；在这期间，如果因为注册时登陆的密码或用户名与数据库中的不匹配，那么就会弹出一个登陆错误的窗口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> messagebox<br><span class="hljs-keyword">from</span> cowpy <span class="hljs-keyword">import</span> cow<br><span class="hljs-keyword">from</span> pyecharts <span class="hljs-keyword">import</span> options <span class="hljs-keyword">as</span> opts<br><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Geo<br><span class="hljs-keyword">from</span> pyecharts.<span class="hljs-built_in">globals</span> <span class="hljs-keyword">import</span> ChartType<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">login_signin</span>:<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">cls, username=<span class="hljs-string">&quot;&quot;</span>, password=<span class="hljs-string">&quot;&quot;</span></span>):<br>        cls.username = username<br>        cls.password = password<br>        cls.data_file = <span class="hljs-string">&quot;..\\模仿12306\\sign_in.txt&quot;</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_registered</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(cls.data_file, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            data = json.load(file)<br>            username = a<br>            <span class="hljs-keyword">if</span> data[<span class="hljs-string">&#x27;username&#x27;</span>] == username:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">cls</span>):<br>        cls.username=<span class="hljs-string">&quot;&quot;</span><br>        cls.password=<span class="hljs-string">&quot;&quot;</span><br>        login_data = &#123;<span class="hljs-string">&#x27;username&#x27;</span>: cls.username, <span class="hljs-string">&#x27;password&#x27;</span>: cls.password&#125;<br>        cls.username = a<br>        cls.password = b<br>        login_data.update(&#123;<span class="hljs-string">&#x27;username&#x27;</span>: cls.username, <span class="hljs-string">&#x27;password&#x27;</span>: hashlib.sha256(cls.password.encode()).hexdigest()&#125;)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;..\\模仿12306\\sign_in.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            json.dump(login_data, file, ensure_ascii=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">return</span> login_data<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the login interface ^v^ &quot;</span>)<br>        file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;..\\模仿12306\\sign_in.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        login_data = json.load(file)<br>        cls.username = a<br>        cls.password = b<br>        <span class="hljs-keyword">if</span> login_data[<span class="hljs-string">&#x27;username&#x27;</span>] == cls.username <span class="hljs-keyword">and</span> login_data[<span class="hljs-string">&#x27;password&#x27;</span>] == hashlib.sha256(cls.password.encode()).hexdigest():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span>(<span class="hljs-title class_ inherited__">Frame</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,master=NONE</span>):<br>        <span class="hljs-built_in">super</span>().__init__(master)<br>        self.master=master<br>        self.pack()<br>        self.creat()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">creat</span>(<span class="hljs-params">self</span>):<br>        self.v=StringVar()<br>        self.v.<span class="hljs-built_in">set</span>(<span class="hljs-number">1</span>)<br>        self.btn01=Radiobutton(self,text=<span class="hljs-string">&quot;注册&quot;</span>,value=<span class="hljs-number">1</span>,variable=self.v)<br>        self.btn01.pack()<br>        self.btn02=Radiobutton(self,text=<span class="hljs-string">&quot;登录&quot;</span>,value=<span class="hljs-number">0</span>,variable=self.v)<br>        self.btn02.pack()<br>        self.bt03=Button(self,text=<span class="hljs-string">&quot;确定&quot;</span>,command=self.confim)<br>        self.bt03.pack()<br>        self.bt04=Button(self,text=<span class="hljs-string">&quot;退出&quot;</span>,command=root.destroy)<br>        self.bt04.pack()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">confim</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.v.get()==<span class="hljs-string">&quot;1&quot;</span>:<br>            <span class="hljs-keyword">global</span> newtk<br>            newtk=Toplevel(root)<br>            newtk.v1=StringVar()<br>            newtk.v1.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;&quot;</span>)<br>            newtk.lab1=Label(newtk,text=<span class="hljs-string">&quot;用户名&quot;</span>,width=<span class="hljs-number">6</span>,height=<span class="hljs-number">2</span>)<br>            newtk.lab1.pack()<br>            Entry(newtk,textvariable=newtk.v1).pack()<br>            newtk.lab2=Label(newtk,text=<span class="hljs-string">&quot;密码&quot;</span>,width=<span class="hljs-number">6</span>,height=<span class="hljs-number">2</span>)<br>            newtk.lab2.pack()<br>            newtk.v2=StringVar()<br>            newtk.v2.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;&quot;</span>)<br>            newtk.en2=Entry(newtk,textvariable=newtk.v2,show=<span class="hljs-string">&quot;*&quot;</span>)<br>            newtk.en2.pack()<br>            Button(newtk,text=<span class="hljs-string">&quot;确定&quot;</span>,command=self.zhuce).pack()<br>            newtk.geometry(<span class="hljs-string">&quot;400x300+200+200&quot;</span>)<br>            newtk.mainloop()<br>        <span class="hljs-keyword">elif</span> self.v.get()==<span class="hljs-string">&quot;0&quot;</span>:<br>            root.destroy()<br>            self.newtk=Tk()<br>            self.newtk.v1=StringVar()<br>            self.newtk.v1.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;&quot;</span>)<br>            self.newtk.lab1=Label(self.newtk,text=<span class="hljs-string">&quot;用户名&quot;</span>,width=<span class="hljs-number">6</span>,height=<span class="hljs-number">2</span>)<br>            self.newtk.lab1.pack()<br>            Entry(self.newtk,textvariable=self.newtk.v1).pack()<br>            self.newtk.lab2=Label(self.newtk,text=<span class="hljs-string">&quot;密码&quot;</span>,width=<span class="hljs-number">6</span>,height=<span class="hljs-number">2</span>)<br>            self.newtk.lab2.pack()<br>            self.newtk.v2=StringVar()<br>            self.newtk.v2.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;&quot;</span>)<br>            self.newtk.en2=Entry(self.newtk,textvariable=self.newtk.v2,show=<span class="hljs-string">&quot;*&quot;</span>)<br>            self.newtk.en2.pack()<br>            Button(self.newtk,text=<span class="hljs-string">&quot;确定&quot;</span>,command=self.denglu).pack()<br>            self.newtk.geometry(<span class="hljs-string">&quot;400x300+200+200&quot;</span>)<br>            self.newtk.mainloop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">zhuce</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">global</span> a<br>        <span class="hljs-keyword">global</span> b<br>        a=newtk.v1.get()<br>        b=newtk.v2.get()<br>        newtk.destroy()<br>        messagebox.showinfo(<span class="hljs-string">&quot;注册&quot;</span>,<span class="hljs-string">&quot;注册成功,请登录&quot;</span>)<br>        login_signin.sign()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">denglu</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">global</span> a<br>        <span class="hljs-keyword">global</span> b<br>        a=self.newtk.v1.get()<br>        b=self.newtk.v2.get()<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span> (<span class="hljs-string">&quot;..\\模仿12306\\sign_in.txt&quot;</span>) <span class="hljs-keyword">as</span> fp:<br>            data = json.load(fp)<br>            <span class="hljs-keyword">if</span> a==data[<span class="hljs-string">&#x27;username&#x27;</span>]  <span class="hljs-keyword">and</span>   hashlib.sha256(b.encode()).hexdigest()== data[<span class="hljs-string">&#x27;password&#x27;</span>]:<br>                self.newtk.destroy()<br>                messagebox.showinfo(<span class="hljs-string">&quot;登录&quot;</span>,<span class="hljs-string">&quot;登录成功&quot;</span>)<br>                menu()<br>            <span class="hljs-keyword">elif</span> a!=data[<span class="hljs-string">&#x27;username&#x27;</span>]   <span class="hljs-keyword">or</span>  hashlib.sha256(b.encode()).hexdigest()!=data[<span class="hljs-string">&#x27;password&#x27;</span>]  :<br>                messagebox.showinfo(<span class="hljs-string">&quot;登录&quot;</span>,<span class="hljs-string">&quot;用户名或者密码错误,请重新登录&quot;</span>)<br></code></pre></td></tr></table></figure><p>​<img src="https://krseoul.imgtbl.com/i/2024/06/25/667ad6cf945d0.png" alt="1719326408779.png"></p><p><img src="https://krseoul.imgtbl.com/i/2024/06/25/667ad70acc4da.png" alt="1719326471221.png"></p><p><img src="https://krseoul.imgtbl.com/i/2024/06/25/667ad7613a410.png" alt="1719326557711.png"></p><p>登录错误;</p><p><img src="https://krseoul.imgtbl.com/i/2024/06/25/667ad78d8d0f5.png" alt="1719326602651.png"></p><p>第二，把登陆后的界面大致分为客运货运两类：客运和货运</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>():<br>    <span class="hljs-keyword">global</span> mutk1<br>    mutk1=Tk()<br>    mutk1.geometry(<span class="hljs-string">&quot;400x300+200+200&quot;</span>)<br>    mutk1.bt1=Button(text=<span class="hljs-string">&quot;客运火车&quot;</span>,command=keyun).pack()<br>    mutk1.bt2=Button(text=<span class="hljs-string">&quot;货运火车&quot;</span>,command=huoyun).pack()<br>    mutk1.bt3=Button(text=<span class="hljs-string">&quot;退出&quot;</span>,command=chuzu).pack()<br>    mutk1.mainloop()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keyun</span>():<br>    mutk1.destroy()<br>    choice_train()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">huoyun</span>():<br>    mutk1.destroy()<br>    choice_truck()<br><br><br></code></pre></td></tr></table></figure><p><em>客运</em>：我们分为5个主要功能分别是通过车次类型筛查，乘车时间点筛查，始发地筛查(始发地筛查中有按价格排序，按时间排序。)其中输入按时间排查过后会同时显示出对应的气温最低最高的柱状图。下面附上相应功能的代码和效果图：我们先要读取列车时刻表的数据库中的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_data</span>():<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;..\\模仿12306\\train_schedule.txt&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        lines = fp.readlines()<br>        result = []<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>            line = line.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            result.append(line)<br>    <span class="hljs-keyword">return</span> result<br><br></code></pre></td></tr></table></figure><p>①：车次类型筛查：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice_1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入车次类型(G:高铁，D:动车，Z：直达，K:普快,T:特快，C:城际铁路)：&quot;</span>)<br>    turn = <span class="hljs-built_in">input</span>()<br>    watchable = read_data()<br>    <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> watchable:<br>        <span class="hljs-keyword">if</span> turn <span class="hljs-keyword">in</span> var:<br>            <span class="hljs-built_in">print</span>(var)<br></code></pre></td></tr></table></figure><p><img src="https://krseoul.imgtbl.com/i/2024/06/25/667ad9c4a7584.png" alt="1719327168648.png"></p><p>② 乘车时间的筛查：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">what_is_the_temperature</span>(<span class="hljs-params">date</span>):<br>    low_temperature_sprinter = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>)]<br>    high_temperature_sprinter = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>,<span class="hljs-number">18</span>)]<br>    low_temperature_summer = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> low_temperature_sprinter]<br>    high_temperature_summer = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> high_temperature_sprinter]<br>    low_temperature_autumn = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>,<span class="hljs-number">20</span>)]<br>    high_temperature_autumn = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">23</span>,<span class="hljs-number">34</span>)]<br>    high_temperature_winter = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>,<span class="hljs-number">15</span>)]<br>    low_temperature_winter = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)]<br>    cities = [<span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-string">&quot;广州&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>, <span class="hljs-string">&quot;成都&quot;</span>, <span class="hljs-string">&quot;武汉&quot;</span>, <span class="hljs-string">&quot;西安&quot;</span>, <span class="hljs-string">&quot;郑州&quot;</span>, <span class="hljs-string">&quot;厦门&quot;</span>, <span class="hljs-string">&quot;南京&quot;</span>, <span class="hljs-string">&quot;济南&quot;</span>]<br>    temperatures = &#123;<br>        <span class="hljs-string">&quot;spring&quot;</span>: &#123;city: &#123;<span class="hljs-string">&quot;max&quot;</span>: random.choice(high_temperature_sprinter), <span class="hljs-string">&quot;min&quot;</span>: random.choice(low_temperature_sprinter)&#125; <span class="hljs-keyword">for</span> city <span class="hljs-keyword">in</span> cities&#125;,<br>        <span class="hljs-string">&quot;summer&quot;</span>: &#123;city: &#123;<span class="hljs-string">&quot;max&quot;</span>: random.choice(high_temperature_summer), <span class="hljs-string">&quot;min&quot;</span>: random.choice(low_temperature_summer)&#125;<span class="hljs-keyword">for</span> city <span class="hljs-keyword">in</span> cities&#125;,<br>        <span class="hljs-string">&quot;autumn&quot;</span>: &#123;city: &#123;<span class="hljs-string">&quot;max&quot;</span>: random.choice(high_temperature_autumn), <span class="hljs-string">&quot;min&quot;</span>: random.choice(low_temperature_autumn)&#125; <span class="hljs-keyword">for</span> city <span class="hljs-keyword">in</span> cities&#125;,<br>        <span class="hljs-string">&quot;winter&quot;</span>: &#123;city: &#123;<span class="hljs-string">&quot;max&quot;</span>:random.choice(high_temperature_winter), <span class="hljs-string">&quot;min&quot;</span>:random.choice(low_temperature_winter)&#125; <span class="hljs-keyword">for</span> city <span class="hljs-keyword">in</span> cities&#125;<br>    &#125;<br>    plt.rc(<span class="hljs-string">&quot;font&quot;</span>, family=<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>)  <span class="hljs-comment"># 这里的用途确保中文能够输出 ！！！</span><br>    plt.figure(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">6</span>))<br>    x_values = np.arange(<span class="hljs-built_in">len</span>(cities))  <span class="hljs-comment"># 城市的索引位置</span><br>    bar_width = <span class="hljs-number">0.35</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(date[<span class="hljs-number">6</span>]) &gt;=<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(date[<span class="hljs-number">6</span>]) &lt;= <span class="hljs-number">5</span>:<br>        max_temperature = [temperatures[<span class="hljs-string">&quot;spring&quot;</span>][i][<span class="hljs-string">&quot;max&quot;</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cities]<br>        min_temperature = [temperatures[<span class="hljs-string">&quot;spring&quot;</span>][j][<span class="hljs-string">&quot;min&quot;</span>] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> cities]<br>        plt.bar(x_values, max_temperature,bar_width, align=<span class="hljs-string">&#x27;center&#x27;</span>,label = <span class="hljs-string">&#x27;Temperature&#x27;</span>, color=<span class="hljs-string">&#x27;blue&#x27;</span>)<br>        plt.bar(x_values+bar_width, min_temperature,bar_width,align=<span class="hljs-string">&#x27;center&#x27;</span>,label = <span class="hljs-string">&#x27;Temperature&#x27;</span>, color=<span class="hljs-string">&#x27;yellow&#x27;</span>)<br>        plt.xlabel(<span class="hljs-string">&quot;Cities&quot;</span>)<br>        plt.ylabel(<span class="hljs-string">&quot;Temperature&quot;</span>)<br>        plt.title(<span class="hljs-string">&quot;Temperature of cities&quot;</span>)<br>        plt.xticks(x_values + bar_width / <span class="hljs-number">2</span>, cities, rotation=<span class="hljs-number">45</span>)<br>        plt.legend()<br>        plt.show()<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">int</span>(date[<span class="hljs-number">6</span>]) &gt;=<span class="hljs-number">6</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(date[<span class="hljs-number">6</span>]) &lt;=<span class="hljs-number">8</span>:<br>        max_temperature = [temperatures[<span class="hljs-string">&quot;summer&quot;</span>][i][<span class="hljs-string">&quot;max&quot;</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cities]<br>        min_temperature = [temperatures[<span class="hljs-string">&quot;summer&quot;</span>][j][<span class="hljs-string">&quot;min&quot;</span>] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> cities]<br>        plt.bar(x_values, max_temperature,bar_width, align=<span class="hljs-string">&#x27;center&#x27;</span>,label = <span class="hljs-string">&#x27;Temperature&#x27;</span>, color=<span class="hljs-string">&#x27;blue&#x27;</span>)<br>        plt.bar(x_values+bar_width, min_temperature,bar_width,align=<span class="hljs-string">&#x27;center&#x27;</span>,label = <span class="hljs-string">&#x27;Temperature&#x27;</span>, color=<span class="hljs-string">&#x27;yellow&#x27;</span>)<br>        plt.xlabel(<span class="hljs-string">&quot;Cities&quot;</span>)<br>        plt.ylabel(<span class="hljs-string">&quot;Temperature&quot;</span>)<br>        plt.title(<span class="hljs-string">&quot;Temperature of cities&quot;</span>)<br>        plt.xticks(x_values + bar_width / <span class="hljs-number">2</span>, cities, rotation=<span class="hljs-number">45</span>)<br>        plt.legend()<br>        plt.show()<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">int</span>(date[<span class="hljs-number">6</span>]) &gt;=<span class="hljs-number">9</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(date[<span class="hljs-number">6</span>]) &lt;= <span class="hljs-number">11</span>:<br>        max_temperature = [temperatures[<span class="hljs-string">&quot;autumn&quot;</span>][i][<span class="hljs-string">&quot;max&quot;</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cities]<br>        min_temperature = [temperatures[<span class="hljs-string">&quot;autumn&quot;</span>][j][<span class="hljs-string">&quot;min&quot;</span>] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> cities]<br>        plt.bar(x_values, max_temperature,bar_width, align=<span class="hljs-string">&#x27;center&#x27;</span>,label = <span class="hljs-string">&#x27;Temperature&#x27;</span>, color=<span class="hljs-string">&#x27;blue&#x27;</span>)<br>        plt.bar(x_values+bar_width, min_temperature,bar_width,align=<span class="hljs-string">&#x27;center&#x27;</span>,label = <span class="hljs-string">&#x27;Temperature&#x27;</span>, color=<span class="hljs-string">&#x27;yellow&#x27;</span>)<br>        plt.xlabel(<span class="hljs-string">&quot;Cities&quot;</span>)<br>        plt.ylabel(<span class="hljs-string">&quot;Temperature&quot;</span>)<br>        plt.title(<span class="hljs-string">&quot;Temperature of cities&quot;</span>)<br>        plt.xticks(x_values + bar_width / <span class="hljs-number">2</span>, cities, rotation=<span class="hljs-number">45</span>)<br>        plt.legend()<br>        plt.show()<br>    <span class="hljs-keyword">else</span>:<br>        max_temperature = [temperatures[<span class="hljs-string">&quot;winter&quot;</span>][i][<span class="hljs-string">&quot;max&quot;</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cities]<br>        min_temperature = [temperatures[<span class="hljs-string">&quot;winter&quot;</span>][j][<span class="hljs-string">&quot;min&quot;</span>] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> cities]<br>        plt.bar(x_values, max_temperature,bar_width, align=<span class="hljs-string">&#x27;center&#x27;</span>,label = <span class="hljs-string">&#x27;Temperature&#x27;</span>, color=<span class="hljs-string">&#x27;blue&#x27;</span>)<br>        plt.bar(x_values+bar_width, min_temperature,bar_width,align=<span class="hljs-string">&#x27;center&#x27;</span>,label = <span class="hljs-string">&#x27;Temperature&#x27;</span>, color=<span class="hljs-string">&#x27;yellow&#x27;</span>)<br>        plt.xlabel(<span class="hljs-string">&quot;Cities&quot;</span>)<br>        plt.ylabel(<span class="hljs-string">&quot;Temperature&quot;</span>)<br>        plt.title(<span class="hljs-string">&quot;Temperature of cities&quot;</span>)<br>        plt.xticks(x_values + bar_width / <span class="hljs-number">2</span>, cities, rotation=<span class="hljs-number">45</span>)<br>        plt.legend()<br>        plt.show()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice_2</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入所需时间点：&quot;</span>)<br>    time_start = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;样例：2024-11-20 08:32:00&quot;</span>)<br>    time_see = read_data()<br>    <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> time_see:<br>        <span class="hljs-keyword">if</span> time_start <span class="hljs-keyword">in</span> var:<br>            <span class="hljs-built_in">print</span>(var)<br>            what_is_the_temperature(time_start.split()[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>运行结果如下图：</p><p><img src="https://krseoul.imgtbl.com/i/2024/06/26/667c0cf62997a.png" alt="1719405811607.png"></p><p><img src="https://krseoul.imgtbl.com/i/2024/06/25/667adb684508a.png" alt="1719327588746.png"></p><p>③ 始发地：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice_3</span>():<br>    start = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;出发地：&quot;</span>)<br>    destination = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;目的地：&quot;</span>)<br>    place = read_data()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;..\\模仿12306\\specific_city.txt&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file_:<br>        <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> place:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;start&#125;</span>--&gt;<span class="hljs-subst">&#123;destination&#125;</span>&quot;</span> <span class="hljs-keyword">in</span> var.split()[<span class="hljs-number">2</span>]:<br>                file_.write(var + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-built_in">print</span>(var)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice_3_1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1.按价格排序&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2.按时间排序&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;3.退出&quot;</span>)<br>    choice = <span class="hljs-built_in">input</span>()<br>    <span class="hljs-keyword">if</span> choice == <span class="hljs-string">&quot;1&quot;</span>:<br>        price_sort()<br>        <span class="hljs-keyword">return</span> choice_3_1()<br>    <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&quot;2&quot;</span>:<br>        time_sort()<br>        <span class="hljs-keyword">return</span> choice_3_1()<br>    <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&quot;3&quot;</span>:<br>        <span class="hljs-keyword">return</span> choice_train()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_choice_3</span>():<br>    choice_3()<br>    choice_3_1()<br></code></pre></td></tr></table></figure><p><img src="https://krseoul.imgtbl.com/i/2024/06/26/667c0d974e4a8.png" alt="1719405973127.png"></p><p>④：按价格排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">price_sort</span>():<br>    d=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;..\\模仿12306\\train_schedule.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    c=[<span class="hljs-string">&quot;&quot;</span>]<br>    b=<span class="hljs-string">&quot;&quot;</span><br>    e=[]<br>    f=[]<br>    p=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> c!=[]:<br>        c=d.readline().split()<br>        <span class="hljs-keyword">if</span> c!=[]:<br>            f+=[c]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(f)):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(f[j][<span class="hljs-number">1</span>])):<br>            <span class="hljs-keyword">if</span> f[j][<span class="hljs-number">1</span>][i]==<span class="hljs-string">&quot;y&quot;</span>:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                b+=f[j][<span class="hljs-number">1</span>][i]<br>        e+=[<span class="hljs-built_in">eval</span>(b)]<br>        b=<span class="hljs-string">&quot;&quot;</span><br>    pai=&#123;&#125;<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(e)):<br>        pai[e[i]]=i<br>    e.sort()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(e)):<br>        d=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;..\\模仿12306\\train_schedule.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(e)):<br>            <span class="hljs-keyword">if</span> j !=pai[e[i]]:<br>                p=d.readline()<br>            <span class="hljs-keyword">elif</span> j==pai[e[i]]:<br>                p=d.readline()<br>                <span class="hljs-built_in">print</span>(p)<br>    d.close()<br></code></pre></td></tr></table></figure><p><img src="https://krseoul.imgtbl.com/i/2024/06/26/667c0ddd349a3.png" alt="1719406038752.png"></p><p>⑤ 按时间差大小排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">time_sum</span>(<span class="hljs-params">x</span>):<br>    a=x[<span class="hljs-number">1</span>]*<span class="hljs-number">30</span>*<span class="hljs-number">24</span>*<span class="hljs-number">60</span>+x[<span class="hljs-number">2</span>]*<span class="hljs-number">24</span>*<span class="hljs-number">60</span>+x[<span class="hljs-number">3</span>]*<span class="hljs-number">60</span>+x[<span class="hljs-number">4</span>]<br>    <span class="hljs-keyword">return</span> a<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">time_sort</span>():<br>    a=[]<br>    d=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;..\\模仿12306\\train_schedule.txt&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    c=[<span class="hljs-string">&quot;&quot;</span>]<br>    b=<span class="hljs-number">0</span><br>    e=[]<br>    f=[]<br>    p=<span class="hljs-string">&quot;&quot;</span><br>    o=[]<br>    shijian=[]<br>    <span class="hljs-keyword">while</span> c!=[]:<br>        c=d.readline().split()<br>        <span class="hljs-keyword">if</span> c!=[]:<br>            f+=[c]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(f)):<br>        a=f[i][<span class="hljs-number">3</span>].split(<span class="hljs-string">&quot;-&quot;</span>)+f[i][<span class="hljs-number">4</span>].split(<span class="hljs-string">&quot;:&quot;</span>)<br>        <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>            a[g]=<span class="hljs-built_in">int</span>(a[g])<br>        e+=[a]<br>        a=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(f)):<br>        a=f[i][<span class="hljs-number">5</span>].split(<span class="hljs-string">&quot;-&quot;</span>)+f[i][<span class="hljs-number">6</span>].split(<span class="hljs-string">&quot;:&quot;</span>)<br>        <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>            a[g]=<span class="hljs-built_in">int</span>(a[g])<br>        o+=[a]<br>        a=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(e)):<br>        b+=time_sum(o[i])-time_sum(e[i])<br>        shijian+=[b]<br>        b=<span class="hljs-number">0</span><br>    suoyin=&#123;&#125;<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(shijian)):<br>        suoyin[shijian[i]]=i<br>    shijian.sort()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(shijian)):<br>        d=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;..\\模仿12306\\train_schedule.txt&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(shijian)):<br>            <span class="hljs-keyword">if</span> j !=suoyin[shijian[i]]:<br>                p=d.readline()<br>            <span class="hljs-keyword">elif</span> j==suoyin[shijian[i]]:<br>                p=d.readline()<br>                <span class="hljs-built_in">print</span>(p)<br>    d.close()<br></code></pre></td></tr></table></figure><p><img src="C:\Users\platycodon\AppData\Roaming\Typora\typora-user-images\image-20240626204844488.png" alt="image-20240626204844488"></p><p>⑥ 查看全国城市AQI指数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">air_AQI</span>():<br>    keys = [<span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-string">&quot;广州&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>, <span class="hljs-string">&quot;成都&quot;</span>, <span class="hljs-string">&quot;武汉&quot;</span>, <span class="hljs-string">&quot;西安&quot;</span>, <span class="hljs-string">&quot;郑州&quot;</span>, <span class="hljs-string">&quot;厦门&quot;</span>, <span class="hljs-string">&quot;南京&quot;</span>, <span class="hljs-string">&quot;济南&quot;</span>]<br>    values = [<span class="hljs-number">204.0</span>, <span class="hljs-number">59.0</span>, <span class="hljs-number">71.0</span>, <span class="hljs-number">38.0</span>, <span class="hljs-number">53.0</span>, <span class="hljs-number">89.0</span>, <span class="hljs-number">99.0</span>, <span class="hljs-number">95.0</span>, <span class="hljs-number">62.0</span>, <span class="hljs-number">56.0</span>, <span class="hljs-number">161.0</span>]<br><br>    c = (<br>        Geo()<br>        .add_schema(maptype=<span class="hljs-string">&quot;china&quot;</span>)<br>        .add(<br>            <span class="hljs-string">&quot;空气质量AOI指数图&quot;</span>,<br>            [<span class="hljs-built_in">list</span>(z) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(keys, values)],<br>            type_=ChartType.EFFECT_SCATTER,<br>        )<br>        .set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>))<br>        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;全国主要城市空气质量AQI图&quot;</span>))<br>        .render()<br>    )<br>    <span class="hljs-comment"># 打开html</span><br>    os.system(<span class="hljs-string">&quot;render.html&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://krseoul.imgtbl.com/i/2024/06/25/667adf4b619c6.png" alt="1719328583423.png"></p><p>其中蓝点能够显示AQI指数：</p><p><img src="C:\Users\platycodon\AppData\Roaming\Typora\typora-user-images\image-20240625233623070.png" alt="image-20240625233623070"></p><p>⑦退出：</p><p><img src="https://krseoul.imgtbl.com/i/2024/06/26/667c0f10d67b7.png" alt="1719406349144.png"></p><p>整个过程都整合到下面的函数代码中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice_train</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== 车票查询 ===&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1.车次类型：&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2.乘车时间点：&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;3.始发地：&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;4.查看全国城市AQI指数&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;5.退出&quot;</span>)<br>    n = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入数字：&quot;</span>)<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-string">&#x27;1&#x27;</span>:<br>        choice_1()<br>    <span class="hljs-keyword">elif</span> n == <span class="hljs-string">&#x27;2&#x27;</span>:<br>        choice_2()<br>    <span class="hljs-keyword">elif</span> n == <span class="hljs-string">&#x27;3&#x27;</span>:<br>        mix_choice_3()<br>    <span class="hljs-keyword">elif</span> n == <span class="hljs-string">&#x27;4&#x27;</span>:<br>        air_AQI()  <span class="hljs-comment">#这里返回的是html界面</span><br>        <span class="hljs-keyword">return</span> choice_train()<br>    <span class="hljs-keyword">elif</span> n == <span class="hljs-string">&#x27;5&#x27;</span>:<br>        <span class="hljs-keyword">return</span> menu()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;invalid,rewrite!!!&quot;</span>)<br>        <span class="hljs-keyword">return</span> choice_train()<br></code></pre></td></tr></table></figure><p><em>货运</em>：</p><p>这里的货运实现的是寄货运货的功能，里面涉及到的距离是通过运用haversine公式，通过两地的经纬度计算出两地的距离。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">haversine</span>(<span class="hljs-params">lat1, lon1, lat2, lon2</span>):<br>    <span class="hljs-keyword">import</span> math<br>    <span class="hljs-keyword">if</span> lat1 &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> lat1 &gt; <span class="hljs-number">90</span> <span class="hljs-keyword">or</span> lat2 &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> lat2 &gt; <span class="hljs-number">90</span> <span class="hljs-keyword">or</span> lon1 &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> lon1 &gt; <span class="hljs-number">180</span> <span class="hljs-keyword">or</span> lon2 &gt; <span class="hljs-number">180</span> <span class="hljs-keyword">or</span> lon2 &lt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Sorry, I don&#x27;t understand&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        r = <span class="hljs-number">6371</span><br>        lat1_radians = (lat1/<span class="hljs-number">180</span>)*math.pi<br>        lat2_radians = (lat2/<span class="hljs-number">180</span>)*math.pi<br>        lon1_radians = (lon1/<span class="hljs-number">180</span>)*math.pi<br>        lon2_radians = (lon2/<span class="hljs-number">180</span>)*math.pi<br>        d = <span class="hljs-number">2</span> * r * math.asin(math.sqrt((math.sin((lat2_radians-lat1_radians) / <span class="hljs-number">2</span>)) ** <span class="hljs-number">2</span> + math.cos(lat1_radians) * math.cos(lat2_radians) * (math.sin((lon2_radians-lon1_radians) / <span class="hljs-number">2</span>)) ** <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">return</span> d<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">place_station</span>():<br>    l =[]<br>    station = [<span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-string">&quot;广州&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>, <span class="hljs-string">&quot;成都&quot;</span>, <span class="hljs-string">&quot;武汉&quot;</span>, <span class="hljs-string">&quot;西安&quot;</span>, <span class="hljs-string">&quot;郑州&quot;</span>, <span class="hljs-string">&quot;厦门&quot;</span>, <span class="hljs-string">&quot;南京&quot;</span>, <span class="hljs-string">&quot;济南&quot;</span>]<br>    <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> station:<br>        <span class="hljs-keyword">for</span> element1 <span class="hljs-keyword">in</span> station:<br>            ans = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;element&#125;</span>--&gt;<span class="hljs-subst">&#123;element1&#125;</span>&quot;</span><br>            <span class="hljs-keyword">if</span> element == element1:<br>                <span class="hljs-keyword">pass</span><br>            <span class="hljs-keyword">else</span>:<br>                l.append(ans)<br>    <span class="hljs-keyword">return</span> l<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">distance</span>():<br>    l = []<br>    place_ = &#123;<span class="hljs-string">&quot;北京&quot;</span>:(<span class="hljs-number">116.328175</span>,<span class="hljs-number">39.900772</span>), <span class="hljs-string">&quot;上海&quot;</span>:(<span class="hljs-number">121.326533</span>,<span class="hljs-number">31.200282</span>), <span class="hljs-string">&quot;广州&quot;</span>:(<span class="hljs-number">113.264499</span>,<span class="hljs-number">23.130061</span>), <span class="hljs-string">&quot;深圳&quot;</span>:(<span class="hljs-number">114.057939</span>,<span class="hljs-number">22.543527</span>), <span class="hljs-string">&quot;成都&quot;</span>:(<span class="hljs-number">104.066301</span>,<span class="hljs-number">30.572961</span>), <span class="hljs-string">&quot;武汉&quot;</span>:(<span class="hljs-number">114.304569</span>,<span class="hljs-number">30.593354</span>), <span class="hljs-string">&quot;西安&quot;</span>:(<span class="hljs-number">108.939645</span>,<span class="hljs-number">34.343207</span>), <span class="hljs-string">&quot;郑州&quot;</span>:(<span class="hljs-number">113.625351</span>,<span class="hljs-number">34.746303</span>), <span class="hljs-string">&quot;厦门&quot;</span>:(<span class="hljs-number">113.625351</span>,<span class="hljs-number">34.746303</span>), <span class="hljs-string">&quot;南京&quot;</span>:(<span class="hljs-number">118.796624</span>,<span class="hljs-number">32.059344</span>), <span class="hljs-string">&quot;济南&quot;</span>:(<span class="hljs-number">117.120128</span>,<span class="hljs-number">36.652069</span>)&#125;<br>    <span class="hljs-keyword">for</span> place <span class="hljs-keyword">in</span> place_:<br>        <span class="hljs-keyword">for</span> place1 <span class="hljs-keyword">in</span> place_:<br>            lat1,lon1 = place_[place][<span class="hljs-number">1</span>],place_[place][<span class="hljs-number">0</span>]<br>            lat2,lon2 = place_[place1][<span class="hljs-number">1</span>],place_[place1][<span class="hljs-number">0</span>]<br>            res = haversine(lat1,lon1,lat2,lon2)<br>            <span class="hljs-keyword">if</span> res == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">pass</span><br>            <span class="hljs-keyword">else</span>:<br>                l.append(<span class="hljs-built_in">round</span>(res,<span class="hljs-number">1</span>))<br>    place_name = place_station()<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(place_name,l))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">weigh</span>(<span class="hljs-params">mass</span>):<br>    <span class="hljs-keyword">if</span> mass &lt;= <span class="hljs-number">2.5</span>*<span class="hljs-number">10</span>**<span class="hljs-number">3</span>:<br>        res = mass*<span class="hljs-number">0.5</span><br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">elif</span> mass &gt; <span class="hljs-number">2.5</span>*<span class="hljs-number">10</span>**<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> mass &lt;= <span class="hljs-number">5</span>*<span class="hljs-number">10</span>**<span class="hljs-number">3</span>:<br>        res = mass*<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">else</span>:<br>        res = mass*<span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">price</span>():<br>    mass = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的货物质量(1.0)&quot;</span>))<br>    price_station = distance()<br>    l = []<br>    <span class="hljs-keyword">for</span> dis <span class="hljs-keyword">in</span> price_station:<br>        temp = price_station[dis]<br>        price = temp*weigh(mass)<br>        l.append(price)<br>    place_name = place_station()<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(place_name,l))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice_truck</span>():<br>    start_place = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的出发地：&quot;</span>)<br>    final_place = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的寄件地：&quot;</span>)<br>    place = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;start_place&#125;</span>--&gt;<span class="hljs-subst">&#123;final_place&#125;</span>&quot;</span><br>    dictionary = price()<br>    <span class="hljs-keyword">for</span> vara <span class="hljs-keyword">in</span> dictionary.keys():<br>        <span class="hljs-keyword">if</span> place == vara:<br>            <span class="hljs-built_in">print</span>(dictionary[vara])<br>    <span class="hljs-keyword">return</span> menu()<br></code></pre></td></tr></table></figure><p><img src="https://krseoul.imgtbl.com/i/2024/06/26/667b974d738f2.png" alt="1719375689507.png"></p><p>最后就是退出功能了，这里在退出时设计了一个小弹窗，通过cowsay板块稍加渲染，展示出一幅活泼的画面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">chuzu</span>():<br>    mutk1.destroy()<br>    messagebox.showinfo(<span class="hljs-string">&quot;感谢使用&quot;</span>,cow_say())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cow_say</span>():<br>    msg = cow.milk_random_cow(<span class="hljs-string">&quot;Zaku,Zaku,Zaku,Zaku&quot;</span>)<br>    <span class="hljs-keyword">return</span> msg<br></code></pre></td></tr></table></figure><p><img src="https://krseoul.imgtbl.com/i/2024/06/26/667b983878760.png" alt="1719375925780.png"></p><p>总结：</p><p>​经过这次项目的设计，使全组成员对python有了一个更深层次的理解。而且还同时锻炼了编程思维，在一定程度上还锻炼出一种创造力。不仅如此，还形成了攻坚克难，积极学习，团结一致的良好的团队精神。在debug环节中感受到了修改代码的苦与修改成功的乐，还顺带对相应知识的深刻理解与感悟。</p><p>​正是因为这样敢于试错，不怕困难的精神，才能够使该项目呈现出来。以后的学习中，我们还需不断磨练自己，是自己最后能够真正的成为一个能人巧匠。</p><p>未来程序改进：</p><p>首先针对整个程序的GUI和一些可视化界面在做不断的完善，实现全部的可视化；其次因为我们的数据库是通过随机生成的伪数据，不够精准，需要把所有数据替换成爬虫得到的数据，然后就是对于两点间的铁路距离问题，可以创建一个机器学习的大模型进行不断的训练，然后得到全国范围内的两地之间的火车站的距离。</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>python_practice2</title>
    <link href="/2024/04/12/python-practice2/"/>
    <url>/2024/04/12/python-practice2/</url>
    
    <content type="html"><![CDATA[<h1 id="python-practice2-一些题目"><a href="#python-practice2-一些题目" class="headerlink" title="python_practice2(一些题目)"></a>python_practice2(<del>一些题目</del>)</h1><h2 id="practice1"><a href="#practice1" class="headerlink" title="practice1"></a>practice1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">从键盘读入一个数n，输出小于或等于n的所有素数的个数。<br>example<br><span class="hljs-built_in">input</span>:<br><span class="hljs-number">100</span><br>output:<br><span class="hljs-number">25</span><br><span class="hljs-built_in">input</span>:<br><span class="hljs-number">200</span><br>output:<br><span class="hljs-number">46</span><br></code></pre></td></tr></table></figure><p>这个题目简单明了，是一个求小于等于它以内的素数个数，此时的逻辑应该是我们要定义一个函数先进行判断是否为素数，然后再用计数器用来计数即可。其实直接用</p><p>Crypto库里的isPrime函数直接一劳永逸。但这里我还是尝试手搓了一下函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isprime</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n):<br>        <span class="hljs-keyword">if</span> n % i == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>isprime(n)<br>count =<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> isprime(j) == <span class="hljs-literal">True</span>:<br>        count +=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(count)<br></code></pre></td></tr></table></figure><h2 id="practice2"><a href="#practice2" class="headerlink" title="practice2"></a>practice2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">从键盘输入一个正整数n，输出小于n的所有与其互素的数的个数。（即求（n）的值）。例如：与<span class="hljs-number">10</span>互素的数为：<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>一共<span class="hljs-number">4</span>个。<br></code></pre></td></tr></table></figure><p>这个题目明显是欧拉函数，如果在sage里面可以直接用euler_phi的函数，那么这里面我们需要在明白欧拉函数后再进行写，这里不做赘述。直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">euler_phi</span>(<span class="hljs-params">n</span>):<br>    result = n   <br>    p = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span>(p * p &lt;= n):<br>        <span class="hljs-keyword">if</span> (n % p == <span class="hljs-number">0</span>):<br>            <span class="hljs-keyword">while</span> (n % p == <span class="hljs-number">0</span>):<br>                n //= p<br>            result -= result // p<br>        p += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>):     <br>        result -= result // n<br>    <span class="hljs-built_in">print</span>(result)<br>euler_phi(n)<br></code></pre></td></tr></table></figure><h2 id="practice3"><a href="#practice3" class="headerlink" title="practice3"></a>practice3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">从键盘接受一个正整数n，生成一个由<span class="hljs-number">1</span>~n的数组。输出一个数组，数组中的每个元素为与前面数组中小于自身的互素的数的个数。<br><br>example:<br><span class="hljs-built_in">input</span>:<br><span class="hljs-number">10</span><br>output:<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>]<br><span class="hljs-built_in">input</span>:<br><span class="hljs-number">20</span><br>output:<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">12</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">16</span>, <span class="hljs-number">6</span>, <span class="hljs-number">18</span>, <span class="hljs-number">8</span>]<br></code></pre></td></tr></table></figure><h3 id="生成1-n的数组"><a href="#生成1-n的数组" class="headerlink" title="生成1-n的数组"></a>生成1-n的数组</h3><p>开始的时候我们可以用列表解析对我们平常写的代码进行一个优化：</p><ul><li><p>基本语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">[expression <span class="hljs-keyword">for</span> iter_val <span class="hljs-keyword">in</span> iterable]<br>[expression <span class="hljs-keyword">for</span> iter_val <span class="hljs-keyword">in</span> iterable <span class="hljs-keyword">if</span> cond_expr]<br></code></pre></td></tr></table></figure></li></ul><p>该优化可以在列表解析，筛选条件，嵌套循环，字典解析，集合解析中进行使用。</p><p>例如1-n我们可以用i for i in range(n+1)。</p><p>回到这道题目上面，因为要判断互质我们可以自己手搓一个gcd函数，也可以用math库里的gcd函数。这里我直接用math库里的gcd函数进行书写。然后通过挨个的互质判断确定个数。因为你这里要考虑到挨个进行比大小，所以一个循环是不够的我们可以考虑循环嵌套(就是大循环所在的数与自己前面的所有数进行互质判断)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>l1 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>)]<br>l2 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, i):<br>        <span class="hljs-keyword">if</span> math.gcd(l1[i-<span class="hljs-number">1</span>], l1[j-<span class="hljs-number">1</span>]) == <span class="hljs-number">1</span>:<span class="hljs-comment">#这里采取i-1,j-1是因为不要超出范围</span><br>            count += <span class="hljs-number">1</span><br>    l2.append(count)<br><span class="hljs-built_in">print</span>(l2)<br></code></pre></td></tr></table></figure><h2 id="practice4"><a href="#practice4" class="headerlink" title="practice4"></a>practice4</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">从键盘输入一个<span class="hljs-built_in">n</span>，打印一个等腰三角形。<br></code></pre></td></tr></table></figure><p>这个题目很明显是循环。而且等腰三角形1，3，5，7……明显是一个等差数列，但是如果只是考虑等差数列的话会发现你会打印出来的是个直角三角形。仔细思考，发现空格也是等差数列排布，与*的等差数列是恰好相反的。所以我们就可以同时用一个循环进行打印，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    spaces = <span class="hljs-string">&#x27; &#x27;</span> * (n - i)<br>    stars = <span class="hljs-string">&#x27;*&#x27;</span> * (<span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(spaces + stars)<br></code></pre></td></tr></table></figure><h2 id="practice-5"><a href="#practice-5" class="headerlink" title="practice 5"></a>practice 5</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">从键盘输入一个<span class="hljs-built_in">n</span>，打印菱形<br></code></pre></td></tr></table></figure><p>这里的菱形借用了上道等腰三角形的思路，以中间最长的那行为界限，我们很容易想到把上面的代码给逆回来进行逐级递减即可。代码实现如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"> <br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    spaces = <span class="hljs-string">&#x27; &#x27;</span> * (n - i)<br>    stars = <span class="hljs-string">&#x27;*&#x27;</span> * (<span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(spaces + stars)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>    spaces = <span class="hljs-string">&#x27; &#x27;</span>*(n-j)<br>    stars = <span class="hljs-string">&#x27;*&#x27;</span>*(<span class="hljs-number">2</span>*j-<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(spaces+stars)<br></code></pre></td></tr></table></figure><h2 id="practice6"><a href="#practice6" class="headerlink" title="practice6"></a>practice6</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">从键盘接收一个<span class="hljs-built_in">n</span>，用来确定数组包含的元素个数。并循环读入<span class="hljs-built_in">n</span>个数字字符，将其转换成<span class="hljs-built_in">int</span>型数据，存储在数组中。编写一个程序，让数组中，相邻的两位进行比较，并将比较大的数字交换到后面的位置，将数组中相邻的两位依次比较，确保经过一轮比较后，数组中最大的数字放在索引为<span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>的位置上。输出此时最大值在索引最大位置上的数组。<br></code></pre></td></tr></table></figure><p>这个题目我们只需要根据题目的叙述来比较每个数与下个数进行比较，如果大于那么就直接进行交换位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>l =[]<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    l.append(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>()))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> l[i] &gt; l[i+<span class="hljs-number">1</span>]:<br>        l[i],l[i+<span class="hljs-number">1</span>] = l[i+<span class="hljs-number">1</span>],l[i]<br><span class="hljs-built_in">print</span>(l)<br></code></pre></td></tr></table></figure><h2 id="practice-7"><a href="#practice-7" class="headerlink" title="practice 7"></a>practice 7</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">从键盘接收一个<span class="hljs-built_in">n</span>，代表当前数组中包含的元素个数。依次从键盘读入<span class="hljs-built_in">n</span>个数据，并转换成<span class="hljs-built_in">int</span>型，保存在数组中。按照上题的方法整理数组中的元素，将数组中元素整理为从小到大有序的数组输出。（注：不允许使用内置的排序函数，或方法）<br></code></pre></td></tr></table></figure><p>这个题目有限制，那么我们应该考虑的是将每个数都作比较，然后如果前面的数大于后面的数那么就可以进行交换位置。这样子便可以达到从小到大排序的效果了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>l =[]<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    l.append(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>()))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(l)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,<span class="hljs-built_in">len</span>(l)):<br>        <span class="hljs-keyword">if</span> l[i] &gt; l[j]:<br>            l[i],l[j] = l[j],l[i]<br><span class="hljs-built_in">print</span>(l)<br></code></pre></td></tr></table></figure><h2 id="practice-8"><a href="#practice-8" class="headerlink" title="practice 8"></a>practice 8</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">从键盘接收一个m，代表二维数组的行数，再从键盘接收一个n，代表二维数组的列数。利用循环读入二维数组所有的数值，并转换为<span class="hljs-built_in">int</span>类型，存在数组中。输出该二维数组。<br></code></pre></td></tr></table></figure><p>这个题目比较简单就直接在代码里呈现思路了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">l = []<br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    row = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        row.append(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>()))<br>    l.append(row)<br><span class="hljs-built_in">print</span>(l)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>practice</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>&#39;python_practice&#39;</title>
    <link href="/2024/03/13/python-practice/"/>
    <url>/2024/03/13/python-practice/</url>
    
    <content type="html"><![CDATA[<h1 id="对于函数的理解"><a href="#对于函数的理解" class="headerlink" title="对于函数的理解"></a>对于函数的理解</h1><p>[TOC]</p><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>通过写一串代码块，来定义出自己想到的解决问题的方法，不要将函数都写到主函数中！</p><h3 id="关于传参"><a href="#关于传参" class="headerlink" title="关于传参"></a>关于传参</h3><p>在函数中参数分为形参和实参，一般的形参没有任何意义{()里面的参数名}，实参是传进去的一个实际变量。</p><h2 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h2><p>函数的递归本质来说就是在自己定义的函数中继续调用自己，每调用一层就意味着要进入一层新的循环。而且递归函数都有其自己的结束条件，也就是在遇到阻碍自己的障碍物之前会一直进行递推。那么该阻碍递推的障碍物就是其结束条件。因此递归有两个要素：递归关系 和 结束条件。</p><p>特别的    递归的时候，每次调用一个函数，计算机都会为这个函数分配新的空间，这就是说，当被调函数返回的时候，调用函数中的变量依然会保持原先的值，否则也不可能实现反向输出。</p><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p>因为斐波那契数列是第三个数等于前两个数之和，那么我们就有两种思路，一种就是根据正常的函数写法，一个就是递归思想。这里第一种方法只给出脚本，重点在于递归函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        a, b = b, a + b<br>        <span class="hljs-keyword">yield</span> a<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">yield 关键字在python中是一种定义生成器的方式，将一个普通函数改造成生成函数。</span><br><span class="hljs-string">简单理解来说yield就是return返回一个值，并且记住返回值的位置，下次直接从这个位置开始。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> fib(<span class="hljs-number">20</span>):<br>    <span class="hljs-built_in">print</span>(val)<br><br></code></pre></td></tr></table></figure><p>递归函数:</p><p>根据斐波那契数列的定义f(n) &#x3D; f(n-1)+f(n-2)。</p><p>这里的函数就是在自己定义的函数中不断进行调用自己，直到遇到自己的结束条件停止。就是工作原理如下图所示。</p><p><img src="https://img2.imgtp.com/2024/03/18/S56ycdlM.png" alt="65f2ab6278d63d6da80a27eb4a033c59.png"></p><p>然后思路就非常明确了，就是我们可以在函数中进行调用自己，通过函数递归就能够实现这行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> fib(n - <span class="hljs-number">1</span>) + fib(n - <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(fib(<span class="hljs-number">5</span>)))<br><span class="hljs-comment">#这串代码是通过函数递归得到第n位的斐波那契值</span><br></code></pre></td></tr></table></figure><h3 id="函数递归的特点"><a href="#函数递归的特点" class="headerlink" title="函数递归的特点"></a>函数递归的特点</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 每一级函数调用时都有自己的变量，但是函数代码并不会得到复制，如计算5的阶乘时每递推一次变量都不同；<br><span class="hljs-bullet">2.</span> 每次调用都会有一次返回，如计算5的阶乘时每递推一次都返回进行下一次；<br><span class="hljs-bullet">3.</span> 递归函数中，位于递归调用前的语句和各级被调用函数具有相同的执行顺序；<br><span class="hljs-bullet">4.</span> 递归函数中，位于递归调用后的语句的执行顺序和各个被调用函数的顺序相反；<br><span class="hljs-bullet">5.</span> 递归函数中必须有终止语句。<br><br></code></pre></td></tr></table></figure><p>总而言之：递归就是进行一次自我调用且拥有完成体。</p><p>对于函数递归来说因为是不断调用函数的内存，也就是说是一种栈的应用：</p><h4 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h4><p>1.系统栈（也叫核心栈、内核栈）<br>是内存中属于操作系统空间的一块区域，其主要用途为： (1)保存中断现场，对于嵌套中断，被中断程序的现场信息依次压入系统栈，中断返回时逆序弹出； (2)保存操作系统子程序间相互调用的参数、返回值、返回点以及子程序(函数)的局部变量。</p><p>2.用户栈<br>是用户进程空间中的一块区域，用于保存用户进程的子程序间相互调用的参数、返回值、返回点以及子程序(函数)的局部变量。<br>我们编写的递归程序属于用户程序，因此使用的是用户栈。</p><p>3.栈溢出<br>函数调用的参数是通过栈空间来传递的，在调用过程中会占用线程的栈资源。而递归调用，只有走到最后的结束点后函数才能依次退出，而未到达最后的结束点之前，占用的栈空间一直没有释放，如果递归调用次数过多，就可能导致占用的栈资源超过线程的最大值，从而导致栈溢出，导致程序的异常退出。</p><p>因此我们可以知道每次函数递归，对于函数本身来说需要保存的内容就包括（局部变量，形参，调用的函数地址，返回值)，因此被调用n次函数就会产生n次函数值，那么运行效率也就不如直接写循环了。</p><p><strong>循环能干的事,递归都能干;递归能干的循环不一定能干</strong>！！！</p>]]></content>
    
    
    <categories>
      
      <category>函数递归</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>posts</title>
    <link href="/2024/03/07/posts/"/>
    <url>/2024/03/07/posts/</url>
    
    <content type="html"><![CDATA[<p>test for latex</p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="13.088ex" height="4.968ex" role="img" focusable="false" viewBox="0 -1509.9 5785.1 2195.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529,0)"><use data-c="1D44F" xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(1235.8,0)"><use data-c="2264" xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="mfrac" transform="translate(2291.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mn" transform="translate(562,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(1187.8,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="msup" transform="translate(2188,0)"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mn" transform="translate(462,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="mn" transform="translate(1496.8,-686)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g><rect width="3253.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container>]]></content>
    
    
    <categories>
      
      <category>test latex</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HELLO</title>
    <link href="/2024/03/06/HELLO/"/>
    <url>/2024/03/06/HELLO/</url>
    
    <content type="html"><![CDATA[<p>welcome to my blog,it is worthwhile creating it.</p><p><img src="https://img2.imgtp.com/2024/03/06/th192Bhi.png"></p>]]></content>
    
    
    <categories>
      
      <category>hello</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/03/06/hello-world/"/>
    <url>/2024/03/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
