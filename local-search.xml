<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python_practice2</title>
    <link href="/2024/04/12/python-practice2/"/>
    <url>/2024/04/12/python-practice2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>&#39;python_practice&#39;</title>
    <link href="/2024/03/13/python-practice/"/>
    <url>/2024/03/13/python-practice/</url>
    
    <content type="html"><![CDATA[<h1 id="对于函数的理解"><a href="#对于函数的理解" class="headerlink" title="对于函数的理解"></a>对于函数的理解</h1><p>[TOC]</p><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>通过写一串代码块，来定义出自己想到的解决问题的方法，不要将函数都写到主函数中！</p><h3 id="关于传参"><a href="#关于传参" class="headerlink" title="关于传参"></a>关于传参</h3><p>在函数中参数分为形参和实参，一般的形参没有任何意义{()里面的参数名}，实参是传进去的一个实际变量。</p><h2 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h2><p>函数的递归本质来说就是在自己定义的函数中继续调用自己，每调用一层就意味着要进入一层新的循环。而且递归函数都有其自己的结束条件，也就是在遇到阻碍自己的障碍物之前会一直进行递推。那么该阻碍递推的障碍物就是其结束条件。因此递归有两个要素：递归关系 和 结束条件。</p><p>特别的    递归的时候，每次调用一个函数，计算机都会为这个函数分配新的空间，这就是说，当被调函数返回的时候，调用函数中的变量依然会保持原先的值，否则也不可能实现反向输出。</p><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p>因为斐波那契数列是第三个数等于前两个数之和，那么我们就有两种思路，一种就是根据正常的函数写法，一个就是递归思想。这里第一种方法只给出脚本，重点在于递归函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        a, b = b, a + b<br>        <span class="hljs-keyword">yield</span> a<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">yield 关键字在python中是一种定义生成器的方式，将一个普通函数改造成生成函数。</span><br><span class="hljs-string">简单理解来说yield就是return返回一个值，并且记住返回值的位置，下次直接从这个位置开始。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> fib(<span class="hljs-number">20</span>):<br>    <span class="hljs-built_in">print</span>(val)<br><br></code></pre></td></tr></table></figure><p>递归函数:</p><p>根据斐波那契数列的定义f(n) &#x3D; f(n-1)+f(n-2)。</p><p>这里的函数就是在自己定义的函数中不断进行调用自己，直到遇到自己的结束条件停止。就是工作原理如下图所示。</p><p><img src="https://img2.imgtp.com/2024/03/18/S56ycdlM.png" alt="65f2ab6278d63d6da80a27eb4a033c59.png"></p><p>然后思路就非常明确了，就是我们可以在函数中进行调用自己，通过函数递归就能够实现这行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> fib(n - <span class="hljs-number">1</span>) + fib(n - <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(fib(<span class="hljs-number">5</span>)))<br><span class="hljs-comment">#这串代码是通过函数递归得到第n位的斐波那契值</span><br></code></pre></td></tr></table></figure><h3 id="函数递归的特点"><a href="#函数递归的特点" class="headerlink" title="函数递归的特点"></a>函数递归的特点</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 每一级函数调用时都有自己的变量，但是函数代码并不会得到复制，如计算5的阶乘时每递推一次变量都不同；<br><span class="hljs-bullet">2.</span> 每次调用都会有一次返回，如计算5的阶乘时每递推一次都返回进行下一次；<br><span class="hljs-bullet">3.</span> 递归函数中，位于递归调用前的语句和各级被调用函数具有相同的执行顺序；<br><span class="hljs-bullet">4.</span> 递归函数中，位于递归调用后的语句的执行顺序和各个被调用函数的顺序相反；<br><span class="hljs-bullet">5.</span> 递归函数中必须有终止语句。<br><br></code></pre></td></tr></table></figure><p>总而言之：递归就是进行一次自我调用且拥有完成体。</p><p>对于函数递归来说因为是不断调用函数的内存，也就是说是一种栈的应用：</p><h4 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h4><p>1.系统栈（也叫核心栈、内核栈）<br>是内存中属于操作系统空间的一块区域，其主要用途为： (1)保存中断现场，对于嵌套中断，被中断程序的现场信息依次压入系统栈，中断返回时逆序弹出； (2)保存操作系统子程序间相互调用的参数、返回值、返回点以及子程序(函数)的局部变量。</p><p>2.用户栈<br>是用户进程空间中的一块区域，用于保存用户进程的子程序间相互调用的参数、返回值、返回点以及子程序(函数)的局部变量。<br>我们编写的递归程序属于用户程序，因此使用的是用户栈。</p><p>3.栈溢出<br>函数调用的参数是通过栈空间来传递的，在调用过程中会占用线程的栈资源。而递归调用，只有走到最后的结束点后函数才能依次退出，而未到达最后的结束点之前，占用的栈空间一直没有释放，如果递归调用次数过多，就可能导致占用的栈资源超过线程的最大值，从而导致栈溢出，导致程序的异常退出。</p><p>因此我们可以知道每次函数递归，对于函数本身来说需要保存的内容就包括（局部变量，形参，调用的函数地址，返回值)，因此被调用n次函数就会产生n次函数值，那么运行效率也就不如直接写循环了。</p><p><strong>循环能干的事,递归都能干;递归能干的循环不一定能干</strong>！！！</p>]]></content>
    
    
    <categories>
      
      <category>函数递归</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>posts</title>
    <link href="/2024/03/07/posts/"/>
    <url>/2024/03/07/posts/</url>
    
    <content type="html"><![CDATA[<p>test for latex</p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="13.088ex" height="4.968ex" role="img" focusable="false" viewBox="0 -1509.9 5785.1 2195.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529,0)"><use data-c="1D44F" xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(1235.8,0)"><use data-c="2264" xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="mfrac" transform="translate(2291.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mn" transform="translate(562,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(1187.8,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="msup" transform="translate(2188,0)"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mn" transform="translate(462,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="mn" transform="translate(1496.8,-686)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g><rect width="3253.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container>]]></content>
    
    
    <categories>
      
      <category>test latex</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HELLO</title>
    <link href="/2024/03/06/HELLO/"/>
    <url>/2024/03/06/HELLO/</url>
    
    <content type="html"><![CDATA[<p>welcome to my blog,it is worthwhile creating it.</p><p><img src="https://img2.imgtp.com/2024/03/06/th192Bhi.png"></p>]]></content>
    
    
    <categories>
      
      <category>hello</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/03/06/hello-world/"/>
    <url>/2024/03/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
